[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{cookiecutter.project_slug}}"
dynamic = ["version"]
description = "{{cookiecutter.description}}"
readme = "README.rst"
license = "Apache-2.0"
requires-python = ">=3.7"
authors = [
    { name = "{{cookiecutter.author_name}}", email = "{{cookiecutter.email}}" },
]
keywords = [
    "aioworkers",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "aioworkers>=0.21.1",
]
[project.optional-dependencies]
dev-test = [
    "aioworkers==0.21.1",
    "coverage[toml]==7.2.5",
    "pytest==7.3.1",
    "pytest-aioworkers[asyncio]==0.4",
    "pytest-mock==3.10.0",
    "pyyaml==6.0",
]
dev-lint = [
    "ruff==0.0.269",
    "isort==5.12.0",
    "black==23.3.0",
    "mypy==1.3.0",
]

[project.urls]
Homepage = "https://github.com/aioworkers/{{cookiecutter.project_slug}}"
Documentation = "https://github.com/aioworkers/{{cookiecutter.project_slug}}"
Issues = "https://github.com/aioworkers/{{cookiecutter.project_slug}}/issues"
Source = "https://github.com/aioworkers/{{cookiecutter.project_slug}}"

[tool.hatch.version]
path = "{{cookiecutter.project_package}}/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/{{cookiecutter.project_package}}",
]

[tool.hatch.envs.default]
features = [
    "dev-test",
]
[tool.hatch.envs.default.scripts]
cov = "coverage run -m pytest && coverage report"

[[tool.hatch.envs.test.matrix]]
python = [
    "3.8",
    "3.9",
    "3.10",
    "3.11",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = [
    "{{cookiecutter.project_package}}",
    "tests",
]
addopts = [
    "--doctest-modules",
]

[tool.coverage.run]
branch = true
parallel = false
source = [
    "{{cookiecutter.project_package}}",
    "tests",
]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.black]
line-length = 120
target-version = [
    "py38",
    "py39",
    "py310",
    "py311",
]

[tool.isort]
profile = "black"
multi_line_output = 3
force_single_line = false
import_heading_localfolder = true
include_trailing_comma = true

[tool.mypy]
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
ignore_missing_imports = true
check_untyped_defs = true

[tool.ruff]
line-length = 120

[tool.hatch.envs.lint]
features = [
    "dev-lint",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:{{cookiecutter.project_package}} tests}"
style = [
    "ruff {args:{{cookiecutter.project_package}} tests}",
    "isort --check-only --diff {args:{{cookiecutter.project_package}} tests}",
    "black --check --diff {args:{{cookiecutter.project_package}} tests}",
]
fmt = [
    "black {args:{{cookiecutter.project_package}} tests}",
    "isort {args:{{cookiecutter.project_package}} tests}",
    "ruff --fix {args:{{cookiecutter.project_package}} tests}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.hatch.envs.template]
detached = true
dependencies = [
    "scaraplate",
]
[tool.hatch.envs.template.scripts]
update = [
    "scaraplate rollup --no-input {args:../cookiecutter-aioworkers-plugin} ."
]
clone = [
    "git clone https://github.com/aioworkers/cookiecutter-aioworkers-plugin {args:../cookiecutter-aioworkers-plugin}"
]
